<section id="main_content">
  <p><code class="language-javascript">Backbone.Highway</code> wraps the <code class="language-javascript">Backbone.Router</code> to simplify its use and bring new functionalities</p>
  <p>Its structure and API is inspired by routers in the Node.js frameworks: Meteor and ExpressJS.</p>
  <p>Added functionalities compared to the <code class="language-javascript">Backbone.Router</code> are:</p>

  <ul>
    <li>Named routes</li>
    <li>Multiple controllers for a same route</li>
    <li>Aliasing between routes</li>
    <li>Before and After triggers distributed using an event aggregator</li>
    <li>Simple trigger cache managing</li>
    <li>"Secured" routes</li>
    <li>Close action (similar to onbeforeunload)</li>
  </ul>

  <h2>
    <a id="installation" class="anchor" href="#installation" aria-hidden="true"><span class="octicon octicon-link"></span></a>Installation
  </h2>
  <p>You can install the library via bower:</p>
  <pre><code class="language-javascript">bower install backbone-highway</code></pre>
  <p>or via npm:</p>
  <pre><code class="language-javascript">npm install backbone-highway</code></pre>

  <h2>
    <a id="dependencies" class="anchor" href="#dependencies" aria-hidden="true"><span class="octicon octicon-link"></span></a>Dependencies
  </h2>

  <ul>
    <li>Backbone >= 1.1.4</li>
    <li>Underscore &gt;= 1.4.4 </li>
  </ul>

  <h2>
    <a id="general-use" class="anchor" href="#general-use" aria-hidden="true"><span class="octicon octicon-link"></span></a>Start routing
  </h2>
  <p>Declaring routes goes through executing a simple method: <code class="language-javascript">Backbone.Highway.route();</code></p>
  <p>
    This method takes two parameters, a unique name and an object describing the route's action.
  </p>
  <p>When all the routes are declared we need to start the router with the <code class="language-javascript">Backbone.Highway.start();</code> method.</p>
  <p>Let's just jump right in with an example:</p>

  <pre class="line-numbers"><code class="language-javascript">
// Declare a route named 'home'
Backbone.Highway.route('home', {~lb}
  // The route URL
  path: '/',

  // Controller method
  action: function () {~lb}
    // Do something fantastic \o/
  {~rb}
{~rb});

// Wait for document ready event
$(function () {~lb}
  // Start the router
  Backbone.Highway.start();
{~rb});</code></pre>

  <h2>
    <a id="router-go" class="anchor" href="#router-go" aria-hidden="true"><span class="octicon octicon-link"></span></a>Router go!
  </h2>
  <p>To redirect the user to a certain route when, for example, he clicks a link simply use the <code class="language-javascript">go</code> method.</p>

  <pre><code class="language-javascript">Backbone.Highway.go('home');</code></pre>

  <p>Let's define a route that takes a parameter:</p>

  <pre class="line-numbers"><code class="language-javascript">
// Declare a user profile page
Backbone.Highway.route('user.profile', {~lb}
  path: '/user/:id',
  action: function(userId) {~lb}
    // Render user profile page
  {~rb}
{~rb});</code></pre>

  <p>Considering the current page contains a link like this:</p>

  <pre><code class="language-markup">&lt;a href="/user/42" class="profile" data-id="42"&gt;Your profile!&lt;/a&gt;</code></pre>

  <p>We could write a script (using jquery) to redirect the user:</p>

  <pre class="line-numbers"><code class="language-javascript">
// Intercept the user click
$('a.profile').click(function(e) {~lb}
  e.preventDefault();

  var userId = $(this).attr('data-id');

  // Redirecting to route named 'user.profile' passing an id
  Backbone.Highway.go('user.profile', [userId]);
{~rb});</code></pre>

  <p>As the first parameter to the <code class="language-javascript">go</code> method can be an object, we could also write the previous script like this:</p>

  <pre class="line-numbers"><code class="language-javascript">
// Intercept the user click
$('a.profile').click(function(e) {~lb}
  e.preventDefault();

  // Redirecting to route using the path defined in the href attribute
  Backbone.Highway.go({~lb} path: this.href {~rb});
{~rb});</code></pre>

  <h2>
    <a id="events-distribution-triggers" class="anchor" href="#events-distribution-triggers" aria-hidden="true"><span class="octicon octicon-link"></span></a> Triggers (Events distribution)
  </h2>
  <p>
    Triggers declared in the <code class="language-javascript">before</code> and <code class="language-javascript">after</code>
    route parameters are dispatched when the route is executed using an event aggregator such as <code class="language-javascript">Backbone.Events</code> or <code class="language-javascript">Backbone.Wreqr</code>.<br>
    The event aggregator instance needs to be passed to Backbone.Highway in the start options.
  </p>


  <p>
    Using Backbone.Events:
  </p>

  <pre class="line-numbers"><code class="language-javascript">
var events = _.extend({~lb}{~rb}, Backbone.Events);

Backbone.Highway.start({~lb}
  dispatcher: events
{~rb});</code></pre>

  <p>
    Using Marionette's instance of Backbone.Wreqr:
  </p>

  <pre class="line-numbers"><code class="language-javascript">
var App = new Backbone.Marionette.Application();
App.start();

Backbone.Highway.start({~lb}
  dispatcher: App.vent
{~rb});</code></pre>

  <h2>
    <a id="trigger-declaration" class="anchor" href="#trigger-declaration" aria-hidden="true"><span class="octicon octicon-link"></span></a>Trigger declaration
  </h2>
  <p>Triggers can be declared in different ways.</p>
  <p>As a simple <code class="language-javascript">String</code>:</p>

  <pre class="line-numbers"><code class="language-javascript">
Backbone.Highway.route('home', {~lb}
  path: '/',
  before: [
    'core',
    'module',
    'submodule'
  ],
  action: function () {~lb}{~rb}
{~rb});
  </code></pre>

  <p>They can also be declared as an object with different parameters:</p>

  <pre class="line-numbers"><code class="language-javascript">
{~lb}
Backbone.Highway.route('home', {~lb}
  path: '/',
  before: [
    {~lb} name: "core", cache: true {~rb},
    {~lb} name: "module", args: ['foo', 'bar'] {~rb},
    'submodule'
  ],
  action: function () {~lb}{~rb}
{~rb});
  </code></pre>

  <p><strong>Most importantly:</strong> Each declared route becomes a trigger itself so that routes can build on each other.</p>

  <h2>
    <a id="catching-client-side-404-and-403" class="anchor" href="#catching-client-side-404-and-403" aria-hidden="true"><span class="octicon octicon-link"></span></a>Catching client-side 404 and 403
  </h2>

  <p>A route named 404 can be declared to catch all non-existent routes.
  In the same way a route can be named 403 to catch accessing restricted routes.</p>

  <pre class="line-numbers"><code class="language-javascript">
Backbone.Highway.route("404", {~lb}
  "action": function(path) {~lb}
    // Couldn't find what you're looking for =/
  {~rb}
{~rb});

// 403 controller
Backbone.Highway.route("403", {~lb}
  "action": function(path) {~lb}
    // Sorry you can't access this content =(
  {~rb}
{~rb});</code></pre>

  <p>For convenience, the action methods will receive the current <code class="language-javascript">window.location.pathname</code> as the first argument.</p>
  <p>The 404 controller will also be executed when a non-existent route is called with the <code class="language-javascript">go</code> method.</p>
  <p>The 403 controller will only be executed if the <code class="language-javascript">redirectToLogin</code> option is set to <code class="language-javascript">false</code>.</p>


  <h2>
    <a id="secured-routes" class="anchor" href="#secured-routes" aria-hidden="true"><span class="octicon octicon-link"></span></a>Secured routes
  </h2>
  <p>Each route can receive an <code class="language-javascript">authed</code> boolean parameter to declare if the route should be interpreted when the user is logged in or not.</p>

  <pre class="line-numbers"><code class="language-javascript">
Backbone.Highway.route("admin.users", {~lb}
  path: "/admin/users",
  authed: true,
  action: function() {~lb}
    // Display list of users
  {~rb}
{~rb});
  </code></pre>

  <p>To make a route be interpreted in both cases (i.e. when the user is logged in or logged out),
  simply leave out the <code class="language-javascript">authed</code> parameter in the route declaration.</p>
  <p><strong>Important</strong></p>
  <p>Only the server has the authority to tell if a connected client is a logged in user or not.
  So for this system to actually work, the server has to print out a small piece of JavaScript to tell the router the current client's state:</p>

  <pre class="line-numbers"><code class="language-markup">
&lt;script type="text/javascript" src="backbone.highway.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
window.logged_in = &lt;?php if ($_SESSION['logged_in']): ?&gt;true&lt;?php else: ?&gt;false&lt;?php endif; ?&gt;;

$(funtion() {~lb}
  // Starting the router telling it if the user is logged in or not
  Backbone.Highway.start({~lb}
    "authed": window.logged_in
  {~rb});
{~rb});
&lt;/script&gt;
  </code></pre>

  <h2>
  <a id="demo--example" class="anchor" href="#demo--example" aria-hidden="true"><span class="octicon octicon-link"></span></a>Demo / Example</h2>

  <p>A demo is available in the <code>demo</code> folder.</p>

  <p>Use npm and bower to install dependencies and grunt to launch the demo server.</p>

  <pre class="line-numbers"><code class="language-javascript">
~/backbone-highway$ npm install &amp;&amp; bower install
~/backbone-highway$ grunt serve</code></pre>

  <h2>
  <a id="license" class="anchor" href="#license" aria-hidden="true"><span class="octicon octicon-link"></span></a>License</h2>

  <p>The MIT License (MIT)</p>

  <p>Copyright (c) 2015 d4f</p>

  <p>Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:</p>

  <p>The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.</p>

  <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.</p>
</section>
