<h3>Backbone.Highway.start( [ options ] );</h3>

<h4>Arguments:</h4>
<ul>
  <li>
    <b>options (Object):</b> Optional parameters to override default router configuration
  </li>
</ul>

<p>
  Starts the router after having declared routes using the <code class="language-javascript">Backbone.Highway.route</code> method.
  It should be called after all the routes have been declared as they will fire immediatelly (if a route matches the current URL).
</p>
<p>
  Routes can be declared after <code class="language-javascript">Backbone.Highway</code> has been started, but those routes
  will not trigger on first load. The only way to trigger them will be to use the <code class="language-javascript">go</code> method.
</p>
<p>
  An event aggregator can be passed via the <code class="language-javascript">dispatcher</code>
  option so that routes will be able to declare custom events which will be triggered before or after
  the controller method. See the <code class="language-javascript">route</code> method documentation
  for more information on using triggers.
</p>

<h4>Example using the default parameters:</h4>

<pre class="line-numbers"><code class="language-javascript">
// Start the router
Backbone.Highway.start({~lb}
  // #### Backbone History options
  // Docs: http://backbonejs.org/#History

  // Use html5 pushState
  pushState: true,

  // Root url for pushState
  root: '',

  // Set to false to force page reloads for old browsers
  hashChange: true,

  // Don't trigger the initial route
  silent: false,

  // #### Backbone.Highway specific options

  // Event aggregator used to dispatch triggers
  dispatcher: null,

  // The current user status, logged in or not
  authenticated: false,

  // Enable automatic execution of a login route when accessing a secured route
  redirectToLogin: false,

  // Names of automatically executed routes
  routes: {~lb}
    login: 'login',
    error404: '404',
    error403: '403'
  {~rb},

  // Local storage
  store: {~lb}
    prefix: 'backbone-highway',
    separator: ':'
  {~rb},

  // Print out debug information
  debug: false,

  // Override log method
  log: function () {~lb}
    if (this.debug && window.console && window.console.log) {
      window.console.log.apply(window.console, arguments);
    {~rb}
  {~rb}
{~rb});</code></pre>
